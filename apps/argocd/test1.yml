# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: emails

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: emails
#   labels:
#     app: emails
#     version: v1
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: emails
#       version: v1
#   template:
#     metadata:
#       labels:
#         app: emails
#         version: v1
#         sidecar.istio.io/inject: "true"
#     spec:
#       serviceAccountName: emails
#       containers:
#         - image: registry.hub.docker.com/maverickme22/emails:v0.0.1
#           imagePullPolicy: Always
#           name: svc
#           ports:
#             - containerPort: 9090

# ---
# kind: Service
# apiVersion: v1
# metadata:
#   name: emails
#   labels:
#     app: emails
# spec:
#   selector:
#     app: emails
#   ports:
#     - port: 9090
#       name: grpc-emails
#       protocol: TCP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: users

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users
  labels:
    app: users
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users
      version: v1
  template:
    metadata:
      labels:
        app: users
        version: v1
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: users
      containers:
        - image: registry.hub.docker.com/maverickme22/users:v0.0.1
          imagePullPolicy: Always
          name: svc
          ports:
            - containerPort: 9090

---
# apiVersion: apps/v1
# kind: Deployment
# apiVersion: argoproj.io/v1alpha1
# kind: Rollout
# metadata:
#   name: users
#   labels:
#     app: users
#     version: v1
# spec:
#   strategy:
#     canary:
#       canaryService: users-canary
#       stableService: users
#       trafficRouting:
#         managedRoutes:
#           - name: set-header-1
#         istio:
#           virtualService:
#             name: users-virtual-service
#             routes:
#             - users-http-route
#       steps:
#       - setHeaderRoute: # enable header based traffic routing where
#           name: "set-header-1"
#           match:
#           - headerName: x-testing # Custom-Header1=Mozilla
#             headerValue:
#               exact: tester
#       - setWeight: 20
#       - pause: {}
#       - setHeaderRoute:
#           name: "set-header-1"
#   replicas: 1
#   selector:
#     matchLabels:
#       app: users
#       version: v1
#   template:
#     metadata:
#       labels:
#         app: users
#         version: v1
#         sidecar.istio.io/inject: "true"
#     spec:
#       serviceAccountName: users
#       containers:
#         - image: registry.hub.docker.com/maverickme22/users:v0.0.1
#           imagePullPolicy: Always
#           name: svc
#           ports:
#             - name: grpc
#               containerPort: 9090
#               protocol: TCP
---
kind: Service
apiVersion: v1
metadata:
  name: users
  labels:
    app: users
spec:
  selector:
    app: users
  ports:
  - name: grpc # important!
    protocol: TCP
    port: 9090
    targetPort: 9090
    appProtocol: grpc

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fastapi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi
  labels:
    app: fastapi
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fastapi
      version: v1
  template:
    metadata:
      labels:
        app: fastapi
        version: v1
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: fastapi
      containers:
        - image: registry.hub.docker.com/maverickme22/fastapi:latest
          imagePullPolicy: Always
          name: web
          ports:
            - containerPort: 8080
          env:
            - name: USERS_SVC
              value: 'users:9090'
            - name: EMAILS_SVC
              value: 'emails:9090'
---
kind: Service
apiVersion: v1
metadata:
  name: fastapi
  labels:
    app: fastapi
spec:
  selector:
    app: fastapi
  ports:
    - port: 8080
      name: http-fastapi

# Version V2
---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: users-v2
#   labels:
#     app: users
#     version: v2
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: users
#       version: v2
#   template:
#     metadata:
#       labels:
#         app: users
#         version: v2
#         sidecar.istio.io/inject: "true"
#     spec:
#       containers:
#         - image: registry.hub.docker.com/maverickme22/users:v0.0.2
#           imagePullPolicy: Always
#           name: svc
#           ports:
#             - containerPort: 9090

---
# kind: Service
# apiVersion: v1
# metadata:
#   name: users-canary
#   labels:
#     app: users
# spec:
#   selector:
#     app: users
#   ports:
#   - name: grpc # important!
#     protocol: TCP
#     port: 9090
#     appProtocol: grpc
# ---
# apiVersion: argoproj.io/v1alpha1
# kind: AnalysisTemplate
# metadata:
#   name: success-rate
# spec:
#   args:
#   - name: service-name
#   metrics:
#   - name: success-rate
#     successCondition: result[0] >= 0.95
#     interval: 30s
#     failureLimit: 1
#     provider:
#       prometheus:
#         address: http://prometheus.istio-system.svc.cluster.local:9090
#         query: |
#           sum(irate(
#             istio_requests_total{reporter="source",destination_service=~"{{args.service-name}}",response_code!~"5.*"}[1m]
#           )) / 
#           sum(irate(
#             istio_requests_total{reporter="source",destination_service=~"{{args.service-name}}"}[1m]
#           ))

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: fastapi-v2
#   labels:
#     app: fastapi
#     version: v2
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: fastapi
#       version: v2
#   template:
#     metadata:
#       labels:
#         app: fastapi
#         version: v2
#         sidecar.istio.io/inject: "true"
#     spec:
#       serviceAccountName: fastapi
#       containers:
#         - image: registry.hub.docker.com/maverickme22/fastapi:latest
#           imagePullPolicy: Always
#           name: web
#           ports:
#             - containerPort: 8080
#           env:
#             - name: USERS_SVC
#               value: 'users:9090'
#             - name: EMAILS_SVC
#               value: 'emails:9090'